# -*- coding: utf-8 -*-
"""Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/caitlin-dc/EE-241/blob/main/Lab1.ipynb

##### Author: Jimin Kim (jk55@uw.edu)
##### Version 1.5.0

# Lab 1 Report

### Team Name: Caitie and Tuan
### Group Members: Tuan Huynh,  Caitlin DeShazo-Couchot

# Exercise 1

<img src="https://github.com/caitlin-dc/EE-241/blob/main/lab1_exercise1.png?raw=1" width="1000">
"""

#Imported to help with various math functions throughout.
import math

x1 = 3
y1 = 4

x2 = 5
y2 = 9

#Computes the distance from the Euclidean Distance formula.
dist = math.sqrt(math.pow(x2-x1,2)+math.pow(y2-y1,2))

print(dist)

"""# Exercise 2

<img src="https://github.com/caitlin-dc/EE-241/blob/main/lab1_exercise2.png?raw=1" width="1000">
"""

#List of sin values by first converting from degrees to radians and then rounding.
sine_list = [round(math.sin(math.radians(180)),5),round(math.sin(math.radians(90)),5), round(math.sin(math.radians(45)),5),round(math.sin(math.radians(30)),5)]

#List of cos values by first converting from degrees to radians and then rounding.
cosine_list = [round(math.cos(math.radians(180)),5),round(math.cos(math.radians(90)),5),round(math.cos(math.radians(45)),5),round(math.cos(math.radians(30)),5)]

print(sine_list)

print(cosine_list)

# NOTE: 
# It's normal for list elements to be not completely identical to correct sine/cosine values due to rounding errors
# If you want to round them use round() function - e.g. round(0.4999999991, 5) = 0.5

"""# Exercise 3

<img src="https://github.com/caitlin-dc/EE-241/blob/main/lab1_exercise3.png?raw=1" width="1000">
"""

# Manually implement sinh(x) when x = 2
sinh_manual = round((math.exp(2)-math.exp(-2))/2,5)

# Use comparison operator == to compare sinh_manul with math.sinh(2)
value_match = (sinh_manual==round(math.sinh(2),5))

#Prints the boolean value of value_match.
print(value_match) # See if the value is True

# NOTE: sinh_manual and math.sinh(2) might be different by tiny amount due to rounding errors,
# In such a case, use round(sinh_manual, 5) and round(value_match, 5) to round the values to 5 decimal places

"""# Exercise 4

<img src="https://github.com/caitlin-dc/EE-241/blob/main/lab1_exercise4.png?raw=1" width="1000">
"""

p1, q1 = False, False
p2, q2 = True, False
p3, q3 = False, True
p4, q4 = True, True

# HINT: XOR = (OR) AND (NAND) where NAND = NOT(AND) 
# NOTE: You must use the same logical expression for cells below with only p and q values changing for each cell

# print xor expression for p1, q1

print((p1 or q1) and (not (p1 and q1)))

# print xor expression for p2, q2

print((p2 or q2) and (not (p2 and q2)))

# print xor expression for p3, q3

print((p3 or q3) and (not (p3 and q3)))

# print xor expression for p4, q4

print((p4 or q4) and (not (p4 and q4)))

"""# Exercise 5

<img src="https://github.com/caitlin-dc/EE-241/blob/main/lab1_exercise5.png?raw=1" width="1000">
"""

sample_list = list(range(101))

# print last 25 values of the list

print(sample_list[-25:])

# print values that fall into 1/4 to 3/4 of the list's length

quarter = math.floor(len(sample_list)/4)
print (sample_list[quarter: 3*quarter])

# print values that correspond to every even index

print(sample_list[0::2])

# print values that correspond to every odd index

print(sample_list[1::2])